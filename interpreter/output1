Meow
Token : /
Token : *
Token : *
Token : Ascii
Token : Encoding
Token : *
Token : Characters
Token : -
Token : 48
Token : -
Token : >
Token : 90
Token : ,
Token : 97
Token : -
Token : >
Token : 122
Token : *
Token : Whitespace
Token : -
Token : 32
Token : ,
Token : 9
Token : *
Token : Allowed
Token : -
Token : 33
Token : to
Token : 126
Token : minus
Token : Characters
Token : and
Token : Whitespace
Token : *
Token : /
Token : #
Token : include
Token : "
Token : tokenizer
Token : .
Token : h
Token : "
Token : std
Token : :
Token : :
Token : vector
Token : <
Token : token
Token : *
Token : >
Token : tv
Token : ;
Token : void
Token : addToken
Token : (
Token : int
Token : s
Token : ,
Token : int
Token : e
Token : ,
Token : std
Token : :
Token : :
Token : string
Token : &
Token : line
Token : ,
Token : tokenType
Token : ttype
Token : )
Token : {
Token : token
Token : *
Token : T
Token : =
Token : new
Token : token
Token : ;
Token : T
Token : -
Token : >
Token : data
Token : =
Token : line
Token : .
Token : substr
Token : (
Token : s
Token : ,
Token : e
Token : -
Token : s
Token : +
Token : 1
Token : )
Token : ;
Token : T
Token : -
Token : >
Token : type
Token : =
Token : ttype
Token : ;
Token : tv
Token : .
Token : push
Token : _
Token : back
Token : (
Token : T
Token : )
Token : ;
Token : std
Token : :
Token : :
Token : cout
Token : <
Token : <
Token : "
Token : Token
Token : :
Token : "
Token : <
Token : <
Token : T
Token : -
Token : >
Token : data
Token : <
Token : <
Token : std
Token : :
Token : :
Token : endl
Token : ;
Token : }
Token : tokenType
Token : getCharType
Token : (
Token : char
Token : c
Token : )
Token : {
Token : if
Token : (
Token : c
Token : <
Token : 32
Token : |
Token : |
Token : c
Token : =
Token : =
Token : 127
Token : )
Token : throw
Token : 1
Token : ;
Token : if
Token : (
Token : (
Token : c
Token : >
Token : =
Token : 65
Token : &
Token : &
Token : c
Token : <
Token : =
Token : 90
Token : )
Token : |
Token : |
Token : (
Token : c
Token : >
Token : =
Token : 97
Token : &
Token : &
Token : c
Token : <
Token : =
Token : 122
Token : )
Token : |
Token : |
Token : (
Token : c
Token : >
Token : =
Token : 48
Token : &
Token : &
Token : c
Token : <
Token : =
Token : 57
Token : )
Token : )
Token : return
Token : character
Token : ;
Token : if
Token : (
Token : c
Token : =
Token : =
Token : 32
Token : |
Token : |
Token : c
Token : =
Token : =
Token : 9
Token : )
Token : return
Token : whitespace
Token : ;
Token : return
Token : special
Token : ;
Token : }
Token : void
Token : tokenize
Token : (
Token : std
Token : :
Token : :
Token : string
Token : &
Token : line
Token : )
Token : {
Token : int
Token : i
Token : =
Token : 0
Token : ,
Token : linend
Token : ,
Token : tokstart
Token : =
Token : 0
Token : ;
Token : tokenType
Token : prev
Token : =
Token : whitespace
Token : ,
Token : cur
Token : ;
Token : linend
Token : =
Token : line
Token : .
Token : length
Token : (
Token : )
Token : -
Token : 1
Token : ;
Token : /
Token : /
Token : Find
Token : the
Token : first
Token : non
Token : whitespace
Token : character
Token : while
Token : (
Token : line
Token : [
Token : i
Token : ]
Token : =
Token : =
Token : 32
Token : |
Token : |
Token : line
Token : [
Token : i
Token : ]
Token : =
Token : =
Token : 9
Token : )
Token : {
Token : i
Token : +
Token : +
Token : ;
Token : }
Token : /
Token : /
Token : Start
Token : Scan
Token : tokstart
Token : =
Token : i
Token : ;
Token : for
Token : (
Token : ;
Token : i
Token : <
Token : =
Token : linend
Token : ;
Token : +
Token : +
Token : i
Token : )
Token : {
Token : cur
Token : =
Token : getCharType
Token : (
Token : line
Token : [
Token : i
Token : ]
Token : )
Token : ;
Token : /
Token : /
Token : std
Token : :
Token : :
Token : cout
Token : <
Token : <
Token : line
Token : [
Token : i
Token : ]
Token : <
Token : <
Token : cur
Token : <
Token : <
Token : std
Token : :
Token : :
Token : endl
Token : ;
Token : switch
Token : (
Token : cur
Token : )
Token : {
Token : case
Token : whitespace
Token : :
Token : if
Token : (
Token : prev
Token : !
Token : =
Token : whitespace
Token : &
Token : &
Token : prev
Token : !
Token : =
Token : special
Token : )
Token : addToken
Token : (
Token : tokstart
Token : ,
Token : i
Token : -
Token : 1
Token : ,
Token : line
Token : ,
Token : cur
Token : )
Token : ;
Token : break
Token : ;
Token : case
Token : character
Token : :
Token : if
Token : (
Token : prev
Token : !
Token : =
Token : character
Token : )
Token : tokstart
Token : =
Token : i
Token : ;
Token : break
Token : ;
Token : case
Token : special
Token : :
Token : if
Token : (
Token : prev
Token : =
Token : =
Token : character
Token : )
Token : addToken
Token : (
Token : tokstart
Token : ,
Token : i
Token : -
Token : 1
Token : ,
Token : line
Token : ,
Token : prev
Token : )
Token : ;
Token : addToken
Token : (
Token : i
Token : ,
Token : i
Token : ,
Token : line
Token : ,
Token : cur
Token : )
Token : ;
Token : break
Token : ;
Token : default
Token : :
Token : throw
Token : "
Token : Error
Token : in
Token : tokenize
Token : "
Token : ;
Token : }
Token : prev
Token : =
Token : cur
Token : ;
Token : }
Token : if
Token : (
Token : prev
Token : =
Token : =
Token : character
Token : )
Token : addToken
Token : (
Token : tokstart
Token : ,
Token : i
Token : ,
Token : line
Token : ,
Token : character
Token : )
Token : ;
Token : }
